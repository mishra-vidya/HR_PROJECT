
CREATE DATABASE HOSPITAL_MANAGMENT_SYSTEM;

USE HOSPITAL_MANAGMENT_SYSTEM;

---CREATING TABLES

CREATE TABLE PATIENT (
PatientID char(5),
Fname varchar(21), 
Lname varchar(21),
Contact char(12),
Age int);

CREATE TABLE DOCTOR(
DoctorID CHAR(5),
Fname varchar(21),
Lname varchar(21),
Speciality varchar(51),
ContactEmail varchar(51));

CREATE TABLE APPOINTMENT(
AppointmentID char(5),
PatientID char(5),
DoctorID char(5),
ApnmntDate datetime,
EndTime datetime ,
ApnmntStatus varchar(21));

CREATE TABLE PatientsAttendAppointments(
PatientID char(5),
AppointmentID char(5));

create table MedicalHistory(
HistoryID char(5),
PatientID char(5),
MedDate datetime,
Condition varchar(21),
Surgeries varchar(21),
Medication varchar(21));

create table PatientsFillHistory(
PatientID char(5),
HistoryID char(5),
DateFilled datetime);

create table Medication_Cost(
Medication varchar(21),
Cost_in$ int);

---BULK INSERTING DATA INTO TABLES

BULK INSERT PATIENT
from 'F:\LEARNBAY\PROJECTS\DATA ANALYSIS\PLACEMENT PROJECT\Patient.csv' with(FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2);

BULK INSERT DOCTOR
from 'F:\LEARNBAY\PROJECTS\DATA ANALYSIS\PLACEMENT PROJECT\Doctor.csv' with(FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2);

BULK INSERT APPOINTMENT
from 'F:\LEARNBAY\PROJECTS\DATA ANALYSIS\PLACEMENT PROJECT\Appointment.csv' with(FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2);

BULK INSERT PatientsAttendAppointments
from 'F:\LEARNBAY\PROJECTS\DATA ANALYSIS\PLACEMENT PROJECT\PatientsAttendAppointments.csv' with(FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2);

BULK INSERT MedicalHistory
from 'F:\LEARNBAY\PROJECTS\DATA ANALYSIS\PLACEMENT PROJECT\MedicalHistory.csv' with(FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2);

BULK INSERT PatientsFillHistory
from 'F:\LEARNBAY\PROJECTS\DATA ANALYSIS\PLACEMENT PROJECT\PatientsFillHistory.csv' with(FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2);

BULK INSERT Medication_cost
from 'F:\LEARNBAY\PROJECTS\DATA ANALYSIS\PLACEMENT PROJECT\Medication_Cost.csv' with(FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2);


---CHECKING FOR TABLES

SELECT * FROM Patient;
SELECT * FROM Doctor;
SELECT * FROM Appointment;
SELECT * FROM MedicalHistory;
SELECT * FROM Medication_Cost;
SELECT * FROM PatientsFillHistory;
SELECT * FROM PatientsAttendAppointments;

---BUILDING OF PRIMARY KEY AND FOREIGN KEY:

---FOR PATIENT TABLE
ALTER TABLE PATIENT
ALTER COLUMN PATIENTID CHAR(5) NOT NULL;

ALTER TABLE PATIENT ADD PRIMARY KEY(PATIENTID);

---FOR DOCTOR TABLE
ALTER TABLE DOCTOR
ALTER COLUMN DOCTORID CHAR(5) NOT NULL;

ALTER TABLE DOCTOR ADD PRIMARY KEY(DOCTORID);

---FOR APPOINTMENT TABLE
ALTER TABLE APPOINTMENT 
ALTER COLUMN APPOINTMENTID CHAR(5) NOT NULL;

ALTER TABLE APPOINTMENT ADD PRIMARY KEY(APPOINTMENTID);

ALTER TABLE APPOINTMENT
ADD CONSTRAINT FK_PATIENT_APNMNT
FOREIGN KEY(PATIENTID)REFERENCES PATIENT(PATIENTID);

ALTER TABLE APPOINTMENT
ADD CONSTRAINT FK_DOCTOR_APNMNT
FOREIGN KEY(DOCTORID)REFERENCES DOCTOR(DOCTORID);

---FOR MEDICAL HISTORY TABLE
ALTER TABLE MEDICALHISTORY
ALTER COLUMN HISTORYID CHAR(5) NOT NULL;

ALTER TABLE MEDICALHISTORY ADD PRIMARY KEY(HISTORYID);

ALTER TABLE MEDICALHISTORY
ADD CONSTRAINT FK_PATIENT_HISTRY
FOREIGN KEY(PATIENTID)REFERENCES PATIENT(PATIENTID);

---FOR PATIENT FILL HISTORY TABLE
ALTER TABLE PATIENTSFILLHISTORY
ALTER COLUMN PATIENTID CHAR(5) NOT NULL;

ALTER TABLE PATIENTSFILLHISTORY
ALTER COLUMN HISTORYID CHAR(5) NOT NULL;

ALTER TABLE PATIENTSFILLHISTORY 
ADD PRIMARY KEY(PATIENTID, HISTORYID);

ALTER TABLE PATIENTSFILLHISTORY 
ADD CONSTRAINT FK_FPATIENT
FOREIGN KEY(PATIENTID)REFERENCES PATIENT(PATIENTID);

ALTER TABLE PATIENTSFILLHISTORY 
ADD CONSTRAINT FK_PATIENT_FHISTRY
FOREIGN KEY(HISTORYID)REFERENCES MEDICALHISTORY(HISTORYID);

---FOR PATIENTS ATTEND APPOINTMENTS
ALTER TABLE PATIENTSATTENDAPPOINTMENTS
ALTER COLUMN PATIENTID CHAR(5) NOT NULL;

ALTER TABLE PATIENTSATTENDAPPOINTMENTS
ALTER COLUMN APPOINTMENTID CHAR(5) NOT NULL;

ALTER TABLE PATIENTSATTENDAPPOINTMENTS
ADD PRIMARY KEY(PATIENTID, APPOINTMENTID);

ALTER TABLE PATIENTSATTENDAPPOINTMENTS
ADD CONSTRAINT FK_APATIENT
FOREIGN KEY(PATIENTID)REFERENCES PATIENT(PATIENTID);

ALTER TABLE PATIENTSATTENDAPPOINTMENTS
ADD CONSTRAINT FK_PATIENT_ATNDENS
FOREIGN KEY(APPOINTMENTID)REFERENCES APPOINTMENT(APPOINTMENTID);

---SOLVING PROBLEMS:

---1) Find the names of patients who have attended appointments scheduled by Dr. John Doe.
 ---FOR THIS WE NEED TO JOIN THREE TABLES. THE DOCTORS,PATIENT AND APPOINTMENT TABLE.
 --AFTER THAT WE WILL USE WHERE CLAUSE FOR THE CONDITION

SELECT * FROM Patient;
SELECT * FROM Doctor;
SELECT * FROM Appointment;

SELECT P.FNAME,P.LNAME
FROM PATIENT P

INNER JOIN APPOINTMENT A
ON P.PATIENTID = A.PATIENTID --TILL THIS WE ARE ABLE TO RETRIVE ALL THE PATIENT WHO HAD APPOINTMENT

INNER JOIN DOCTOR D
ON A.DOCTORID = D.DOCTORID 
WHERE D.FNAME = 'DR. JOHN' AND D.LNAME = 'DOE'; ---BY APPLYING CONDITION WE GET THE REQUIRED RESULT


---2)Calculate the average age of all patients.
---FOR THIS WE WILL USE AVG FUN

SELECT * FROM PATIENT;

SELECT AVG(AGE) AS 'AVG_AGE'
FROM PATIENT;

---3)Create a stored procedure to get the total number of appointments for a given patient.
---HERE WE WILL CREATE PROCEDURE AND USE COUNT FUN TO COUNT THE NO OF APPOINTMENT OF THE PATIENT

CREATE PROCEDURE TotalAppointments @PatientID varchar(21)
AS
BEGIN
    SELECT COUNT(*) AS'TOTAL_NUM_APPOINTMENT'
	FROM APPOINTMENT
	WHERE PATIENTID = @PatientID;
END;

---TO SEE RESULT
EXEC TotalAppointments'P0002';

---4)Create a trigger to update the appointment status to 'Completed' when the appointment date has passed.
---HERE WE CREATE TRIGGER ON APPLOINTMENT TABLE

SELECT * FROM APPOINTMENT;

CREATE TRIGGER APPOINTMENT_STATUS
ON APPOINTMENT 
FOR INSERT, UPDATE 
AS
BEGIN 

UPDATE APPOINTMENT
SET APNMNTSTATUS = 'COMPLETED'
WHERE APNMNTDATE < GETDATE() AND APNMNTSTATUS != 'COMPLETED' AND APPOINTMENTID IN (SELECT APPOINTMENTID FROM INSERTED)
---HERE THE INSETED TABLE HOLDS THE NEWLY INSTERED OR UPDATED ROWS. IT PREVENT TO UPDATING PAST RECORDS

END;


---5)Find the names of patients along with their appointment details and the corresponding doctor's name.
---FOR THIS WE WILL JOIN THREE TBALES THE PATIENTS,DOCTOR AND APPOINTMENT TABLE

SELECT * FROM Patient;
SELECT * FROM Doctor;
SELECT * FROM Appointment;

SELECT P.FNAME AS 'PATIENTFIRSTNAME' , P.LNAME AS 'PATIENTLASTNAME',
A.APNMNTDATE,A.ENDTIME,A.APNMNTSTATUS,
D.FNAME AS 'DRFIRSTNAME' , D.LNAME AS 'DRLASTNAME'
FROM PATIENT P
INNER JOIN APPOINTMENT A
ON P.PATIENTID = A.PATIENTID
INNER JOIN DOCTOR D
ON D.DOCTORID = A.DOCTORID;

---6)Find the patients who have a medical history of diabetes and their next appointment is scheduled within the next 7 days.
---FOR THIS WE HAVE TO JOIN THREE TABLES. THE PATIENTS, APPOINTMENT AND MEDICAL HISTORY TABLE

SELECT * FROM Patient;
SELECT * FROM MedicalHistory;
SELECT * FROM Appointment;

SELECT P.FNAME, P.LNAME
FROM PATIENT P
INNER JOIN APPOINTMENT A ON P.PATIENTID = A.PATIENTID
INNER JOIN MEDICALHISTORY M ON M.PATIENTID = A.PATIENTID
WHERE M.CONDITION = 'Diabetes'
AND A.APNMNTDATE BETWEEN GETDATE() AND DATEADD(DAY, 7, GETDATE());

---AS THE DATA HAS NO RELEVERNT DATE SO WE ARE NOT GETTING ANYTHING

---7)Find patients who have multiple appointments scheduled.
---FOR THIS WE WILL JOIN TWO TABLE THEN WILL USE COUNT FUNCTION FOR COUNTING GROUPBY FOR GROUPING AND HAVING FOR CONDITION


SELECT * FROM Patient;
SELECT * FROM Appointment;

SELECT P.PATIENTID, COUNT(A.APPOINTMENTID) AS 'APPOINTMENT_COUNT'
FROM PATIENT P
INNER JOIN APPOINTMENT A
ON P.PATIENTID = A.PATIENTID
GROUP BY P.PATIENTID
HAVING COUNT(A.APPOINTMENTID) > 1;


--8)Calculate the average duration of appointments for each doctor.
---HERE WE JOIN TWO TABLES THE DOCTOR AND THE APPOINTMENT TABLE. AND WILL USE AVG FUN FOR FINDING DATEDIFF FOR FINDING DIFFRENCE
---GROUPBY FOR GROUPING 
---WE ARE HAVING PROB IN THIS SOL AS WE ARE GETTING NEGATIVE AVG VALUE

SELECT * FROM Doctor;
SELECT * FROM Appointment;

SELECT D.DoctorID, AVG(DATEDIFF(MINUTE,A.APNMNTDATE,A.ENDTIME)) AS 'AVG_TIME_IN_MIN'
FROM DOCTOR D
INNER JOIN APPOINTMENT A
ON D.DOCTORID = A.DOCTORID
GROUP BY D.DoctorID;

---HERE I FOUND AN ERROR IN DATA 
SELECT *
FROM Appointment
WHERE EndTime < APNMNTDATE;
---3RD APPOINTMENT HAS ENDDATE IS BEFORE APPOINTMNET DATE
--THERE MUST BE 13.21 INSTED OF 01.21 AS IT IS IN 24HR FORMATE

---CORRECTING DATA
UPDATE APPOINTMENT
SET ENDTIME = '2023-11-09 13:21:00.000'
WHERE AppointmentID = 'A0003';

---9)Find Patients with Most Appointments
---FOR THIS WE WILL JOIN TWO TABLE PATIENT AND APPOINTMENT TABLE AND USE GROUPBY AS WE AER USING FUN WITHIN SELECT CLAUSE 
---ALSO USE ORDER BY FOR ORDERING NASD TOP FOR GETTING HEIGEST VALUE

SELECT * FROM PATIENT;
SELECT * FROM APPOINTMENT;

SELECT TOP 1 P.PATIENTID, COUNT(A.APPOINTMENTID) AS 'APPOINTMENT_COUNT'
FROM PATIENT P
INNER JOIN APPOINTMENT A
ON P.PATIENTID = A.PATIENTID
GROUP BY P.PATIENTID ---TILL HERE WE GET 1ST VALUE FOR HEIGHEST WE USE ORDERBY
ORDER BY APPOINTMENT_COUNT DESC;
  
---10)Calculate the total cost of medication for each patient.
---FOR THIS WE WILL JOIN PATIENT ,MEDICALHISTORY AND MEDICATION COST THEN USE SUM FOR TOTAL AND GROUBY A


SELECT * FROM Patient;
SELECT * FROM MedicalHistory;
SELECT * FROM Medication_Cost;

SELECT P.PATIENTID, SUM(MC.COST_IN$) AS 'TOTAL_MED_COST_IN($)'
FROM PATIENT P
INNER JOIN MEDICALHISTORY M
ON P.PATIENTID = M.PATIENTID
INNER JOIN MEDICATION_COST MC
ON M.MEDICATION = MC.MEDICATION
GROUP BY P.PATIENTID;

---Create a stored procedure named CalculatePatientBill that calculates the total bill
---for a patient based on their medical history and medication costs. The procedure should take the PatientID as a parameter
---and calculate the total cost by summing up the medication costs and applying a charge of $50 for each surgery
--in the patient's medical history. If the patient has no medical history,
--the procedure should still return a basic charge of $50.


---CREATING PROCEDURE WITH ONE PARAMETER PATIENTID
CREATE PROCEDURE CALCULATEPATIENTBILL
@PATIENTID VARCHAR(11)
AS
BEGIN
DECLARE @TOTALCOST INT ---DECLEARING ONE VARIABLE FOR STORING TOTAL BILL OF A PATIENT
---CALCULATING MEDICATION COST
SELECT @TOTALCOST = SUM(MC.COST_IN$)   --HERE SELECT STMNT WILL SHOW THE SUM AS TOTAL COST
FROM MEDICALHISTORY M                  --HERE WE JOIN TWO TABELES WHICH IS MEDICAL HISTROY AND MEDICATION COST
INNER JOIN MEDICATION_COST MC         ---AND WITH THIS JOININGG TOTAL MEDICATION COST WILL STORE IN THE VARIABLE @TOTALCOST
ON M.MEDICATION = MC.MEDICATION --HERE I APPLY WHERE CONDITION TO ENSURE THAT ONLY THE MEDICATIION OF GIVEN PATIENT WILL CONSIDER
WHERE M.PATIENTID = @PATIENTID;

---ADDING $50 --HERE WE WILL COUNT THE NO. OF SURGERIES AND ADD THE NO.OF SUREGER*$50 TO THE TOTALCOST

SELECT @TOTALCOST = @TOTALCOST + COUNT(SURGERIES)*50
FROM MEDICALHISTORY 
WHERE PATIENTID = @PATIENTID AND SURGERIES IS NOT NULL; --NOT NULL IS TO ENSURE THAT ONLY THAT PATIENT WILL CONSIDER WHO HAD SURGEIES

---IF THE PATIENT HAS NO MEDICAL HISTORY THEN BASIC CHARGE WILL APPLY WHICH WILL BE $50

IF @TOTALCOST IS NULL
SET @TOTALCOST = 50;

SELECT @TOTALCOST AS 'TOTALBILL'

END;


EXEC CALCULATEPATIENTBILL P0003;


